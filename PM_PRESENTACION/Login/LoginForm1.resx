<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAeWwwAHh0WwBZZnEAiWoJAIxsCgCNbg0AhmsQAI1vEQCLch8AkHESAJFyFACTdBUAknQaAJR1
        GQCTdhwAlnccAJV4HgCVeCAAmXoiAJp7JACafCYAmn4oAJx+KQCefywAmYAtAJ6ALQCfgjAAmYE1AJ+H
        OQCggjIAoYQ1AKOHOACkhjkAo4g5AKSJOgCliD0Apow/AKeKQACljkMApY5EAKiLQACojUIAqo1GAKuP
        SACsj0kArJBKAK6RTQCulE8Ar5NRAKuVUQCollkAsJRTALGVVAC1mlwAtpxeALieYQC8omcAtqRqAL2j
        agC7pGgAvaVrAL2mbAC+qG8Av6hxAMCpcgDBqnUAw6x4AMSuegAoVaAAKVmrAEBbhgAVVsUAHVfPAABJ
        2gAEStgAA07aAABK3QAGUNkACVPZABhX1QAfX9cAIF3BAB5l3QAmY9cAJmbWACVp1gAuaNYAMmjXADZ2
        3gAAT+EAAE7mAAxY4AAAUe4ACV/zAABX/gAAWP8AAl7/ABli4gAFYv8ACmb/AA1n/wAMaP8AEGr+ABJs
        /wAVb/8AF3D/ABlx/wAcc/8AHnT/AClv4wAlbugAJ3DnADp/7AAidvsAIXf/ACN4/wAlef8AKHv/ACl9
        /wAsf/8AMX70AEV42gA4geIAO4XiADmC5QA/iuQAOIX2ADGC/wAzhP8ANob+ADqJ/wA+jP8AUoPfAFSI
        3gBkj94AQoLkAESF5ABAiOYARYzrAEaK7QBQl+sAUp7rAEGN/wBEj/8ARZH/AEeU/wBKlf8ATZj/AFmb
        8ABRm/8AUp3/AFSe/gBmkeAAbJXhAHme5gBfpPAAVqH/AFmj/wBapP8AXKb/AF6o/wBjpfAAaKvxAGKr
        /wBirP8AZK3/AGaw/wBosv8AbLD/AGq0/wBtt/8AdbP/AHm1/wB2uPkAcLr/AHK9/wB3vv8Afbn/AHnG
        /wB9xv8Afcz/AIqbsQDIsoEAybSDAMu2hwDPvI8A0LyRANG/lQCBvf8AhcH/AIjF/wCCyfoAhc76AIbI
        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
        ////////////////////////
</value>
  </data>
</root>